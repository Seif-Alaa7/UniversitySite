@model IEnumerable<Models.Subject>

@{
    ViewData["Title"] = "Results Registration";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/ResultRegisteration.css" asp-append-version="true">
</head>
<body>
    <div class="container">
        <h1 class="custom-header">Results Registration</h1>
        <h3 class="department-name">Department Name: @ViewBag.departmentName</h3>

        <form asp-controller="StudentSubjects" asp-action="SaveAllDegrees" method="post">
            <input type="hidden" name="studentId" value="@ViewBag.StudentId" />
            <table class="table table-striped table-bordered custom-table">
                <thead>
                    <tr>
                        <th>@Html.DisplayNameFor(model => model.Name)</th>
                        <th>Doctor</th>
                        <th>Subject Hours</th>
                        <th>Subject Type</th>
                        <th>Degree</th>
                        <th>Grade</th>
                        <th>Register Degree</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Name)</td>
                            <td>@ViewBag.DoctorNames[item.DoctorId]</td>
                            <td>@Html.DisplayFor(modelItem => item.SubjectHours)</td>
                            <td>@Html.DisplayFor(modelItem => item.subjectType)</td>

                            <td>
                                @if (ViewData["subjectDegree"] is Dictionary<int, int> subjectDegrees && subjectDegrees.ContainsKey(item.Id))
                                {
                                    @subjectDegrees[item.Id]
                                }
                                else
                                {
                                    <span>No Degree</span>
                                }
                            </td>
                            <td>
                                @if (ViewData["subjectGrade"] is Dictionary<int, Models.Enums.Grade> subjectGrades && subjectGrades.ContainsKey(item.Id))
                                {
                                    var grade = subjectGrades[item.Id];
                                    var displayName = grade.GetType()
                                    .GetField(grade.ToString())?
                                    .GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute), false)
                                    .Cast<System.ComponentModel.DataAnnotations.DisplayAttribute>()
                                    .FirstOrDefault()?.Name ?? grade.ToString();
                                    @displayName
                                }
                                else
                                {
                                    <span>No Grade</span>
                                }
                            </td>
                            <td>
                                <input type="number" name="Degrees[@item.Id]" class="form-control small-input"
                                       placeholder="Enter Degree"
                                       value="@(ViewData["subjectDegree"] != null && ((Dictionary<int, int>)ViewData["subjectDegree"]).ContainsKey(item.Id) ? ((Dictionary<int, int>)ViewData["subjectDegree"])[item.Id] : null)" min="0" max="100" required />
                                @if (ViewData.ModelState.ContainsKey($"Degrees[{item.Id}]"))
                                {
                                    <span class="text-danger">
                                        @ViewData.ModelState[$"Degrees[{item.Id}]"].Errors[0].ErrorMessage
                                    </span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button id="btn" type="submit" class="custom-submit-btn">
                <p id="btnText">Save</p>
                <div class="check-box">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50">
                        <path fill="transparent" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                    </svg>
                </div>
            </button>
        </form>
    </div>
</body>
</html>
<script>
    const btn = document.querySelector("#btn");
    const btnText = document.querySelector("#btnText");
    const degreeInputs = document.querySelectorAll('input[name^="Degrees"]'); // Select all degree input fields

    btn.onclick = (event) => {
        // Check if any degree input is out of range (less than 0 or greater than 100)
        let invalidDegree = false;
        degreeInputs.forEach(input => {
            const degreeValue = parseInt(input.value, 10);
            if (degreeValue < 0 || degreeValue > 100 || isNaN(degreeValue)) {
                invalidDegree = true;
                input.classList.add('is-invalid');  // Optionally add invalid class for visual feedback
            } else {
                input.classList.remove('is-invalid');
            }
        });

        if (invalidDegree) {
            event.preventDefault();  // Prevent form submission
            return false;  // Don't execute the transition and "Thanks" text update
        }

        // If all degrees are valid, change the button text and trigger transition
        btnText.innerHTML = "Thanks";
        btn.classList.add("active");
    };
</script>




