@model IEnumerable<Models.Student>

@{
    ViewData["Title"] = "Results Registration";
}
<!-- StyleSheet -->
<link rel="stylesheet" href="/css/StudentSubjectRegister.css">

<div class="container header-container">
    <h1>@ViewData["Title"]</h1>
    <h3>
        <span class="badge badge-info">@ViewBag.SubjectName</span> Subject
    </h3>
    <h4>
        <i class="fas fa-layer-group icon-spacing"></i><strong>Level:</strong> @ViewBag.Level
    </h4>
    <h4>
        <i class="fas fa-calendar-alt icon-spacing"></i><strong>Semester:</strong> @ViewBag.Semester
    </h4>
</div>

<input type="file" id="excelFileInput" accept=".xlsx, .xls" class="d-none">
<div align="right">
<button type="button" id="importExcelBtn" class="btn btn-success">
    <i class="fas fa-file-import"></i>
    Import from Excel
    </button>
</div>
<div class="container" style="margin-top: 20px;">
    <form asp-action="SaveAllDegrees" method="post">
        <input type="hidden" name="SubjectId" value="@ViewBag.id" />
        <table class="table table-hover table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.Id)</th>
                    <th>@Html.DisplayNameFor(model => model.Name)</th>
                    <th>Degree</th>
                    <th>Grade</th>
                    <th>Register Degree</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Id)</td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                            <a href="@Url.Action("Details", "Student", new { id = item.Id })" class="ml-2" title="View Student">
                                <i class="fas fa-user"></i>
                            </a>
                        </td>
                        <td>
                            @if (ViewData["StudentDegree"] != null && ((Dictionary<int, int>)ViewData["StudentDegree"]).ContainsKey(item.Id))
                            {
                                var degree = ((Dictionary<int, int>)ViewData["StudentDegree"])[item.Id];
                                @degree
                            }
                            else
                            {
                                <span>No Degree</span>
                            }
                        </td>
                        <td>
                            @if (ViewData["StudentGrade"] != null && ((Dictionary<int, Models.Enums.Grade>)ViewData["StudentGrade"]).ContainsKey(item.Id))
                            {
                                var grade = ((Dictionary<int, Models.Enums.Grade>)ViewData["StudentGrade"])[item.Id];
                                var fieldInfo = grade.GetType().GetField(grade.ToString());
                                var displayAttribute = fieldInfo?.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute), false)
                                .Cast<System.ComponentModel.DataAnnotations.DisplayAttribute>()
                                .FirstOrDefault();
                                var displayName = displayAttribute?.Name ?? grade.ToString();
                                @displayName
                            }
                            else
                            {
                                <span>No Grade</span>
                            }
                        </td>
                        <td>
                            <input type="number"
                                   name="Degrees[@item.Id]"
                                   class="form-control small-input"
                                   placeholder="Enter Degree"
                                   value="@(ViewData["StudentDegree"] != null && ((Dictionary<int, int>)ViewData["StudentDegree"]).ContainsKey(item.Id) ? ((Dictionary<int, int>)ViewData["StudentDegree"])[item.Id] : null)"
                                   min="0"
                                   max="100"
                                   required />
                            @if (ViewData.ModelState.ContainsKey($"Degrees[{item.Id}]"))
                            {
                                <span class="text-danger">
                                    @ViewData.ModelState[$"Degrees[{item.Id}]"].Errors[0].ErrorMessage
                                </span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button id="btn" type="submit" class="custom-submit-btn">
            <p id="btnText">Save</p>
            <div class="check-box">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50">
                    <path fill="transparent" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                </svg>
            </div>
        </button>
    </form>
</div>
<script src="~/js/student.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
<script src="~/js/ImportExcel.js"></script>



